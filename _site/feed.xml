<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lukasz Ciesluk</title>
    <description>Software Engineer</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Ramda - functional js</title>
        <description>&lt;p&gt;Recently I spent some time working on an app designed to be used during an interview process. The application is supposed to fetch and transform data from several APIs to mostly list investors in private market space along with their commitments for a given asset class.&lt;/p&gt;

&lt;p&gt;It was a perfect opportunity to refresh some knowledge around technologies like React along with libraries as Axios, Cypress, and Jest for testing, TypeScript for static typing, Ramda for data mutation and MUI for styling. Feel free to find app here with some screenshots of the &lt;a href=&quot;https://github.com/GarciaPL/InvestorApp&quot;&gt;Investor App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For data processing from APIs, I thought about using good old &lt;a href=&quot;https://www.npmjs.com/package/underscore&quot;&gt;Underscore&lt;/a&gt; but after some time I realized that last time it was updated about 2 years ago and nowadays it does not work well with React &amp;amp; Typescript. Luckily, I was able to find very interesting library called &lt;a href=&quot;https://github.com/ramda/ramda&quot;&gt;Ramda&lt;/a&gt; which is &lt;strong&gt;designed specifically for a functional programming style, one that makes it easy to create functional pipelines, one that never mutates user data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s take some data like below which represents investor commitments for a Private Equity asset class&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34728&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;asset_class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;firm_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2670&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;currency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5M&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90807&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;asset_class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;firm_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2670&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;currency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EUR&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;15M&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25277&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;asset_class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;firm_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2670&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;currency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKD&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;amount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;80M&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For a PieChart from &lt;a href=&quot;https://mui.com&quot;&gt;Mui&lt;/a&gt; library, we need to transform data to the format expected by the component so every element would have properties like &lt;strong&gt;id, value, label&lt;/strong&gt;. By using Ramda we can achieve it quite easily by just using the code below&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;ramda&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PieChartLabel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transformCommitments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;applySpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseMillions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PieChartLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parseMillions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At the end we would receive the below output by just using &lt;strong&gt;transformCommitments(data)&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;34728&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5M (HKD)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90807&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;15M (EUR)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25277&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;80M (HKD)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More details about &lt;strong&gt;applySpec&lt;/strong&gt; can be found here &lt;a href=&quot;https://ramdajs.com/docs/#applySpec&quot;&gt;Ramda Docs&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Jul 2024 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/ramda-functional-js/</link>
        <guid isPermaLink="true">http://localhost:4000/ramda-functional-js/</guid>
      </item>
    
      <item>
        <title>Python Garbage Collection</title>
        <description>&lt;p&gt;The standard Python interpreter (CPython) uses two garbage collectors at once:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;reference counting&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;generational garbage collection&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Reference counting is very simple and efficient, but it has one big drawback - it does not know how to detect &lt;strong&gt;circular references&lt;/strong&gt;. Because of this there is an additional collector in Python called generational GC which monitors objects with potential circular references.&lt;/p&gt;

&lt;p&gt;In Python reference counting collector is &lt;strong&gt;fundamental and cannot be disabled&lt;/strong&gt; whereas GC is &lt;strong&gt;optional and can be disabled&lt;/strong&gt;. GC does not work in real time and runs periodically.&lt;/p&gt;

&lt;h2 id=&quot;reference-counting&quot;&gt;Reference counting&lt;/h2&gt;

&lt;p&gt;When you create an object in Python, the underlying C object has both a &lt;strong&gt;Python type&lt;/strong&gt; (ex. list, dict or function) and a &lt;strong&gt;reference count&lt;/strong&gt;. Python object’s reference count is incremented if the object is referenced and it is decremented when an object is dereferenced. If an object’s reference count is 0, the memory for the object is deallocated.&lt;/p&gt;

&lt;p&gt;Ways to increase the reference count for an object&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;assign an object to a variable&lt;/li&gt;
  &lt;li&gt;add an object to a data structure ex. adding to a list or as a property on a class instance&lt;/li&gt;
  &lt;li&gt;pass an object as an argument to the function - in Python concept of &lt;strong&gt;passing by assignment&lt;/strong&gt; is used when function is called. &lt;strong&gt;Each argument is assigned to a variable in the function scope&lt;/strong&gt; which points to the same object as the variable that was passed in.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can use the &lt;a href=&quot;https://docs.python.org/3/library/sys.html&quot;&gt;sys&lt;/a&gt; module from the Python standard library to check reference counts for a particular object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my string&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getrefcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#gives 2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are &lt;strong&gt;two references&lt;/strong&gt; of our variable &lt;strong&gt;a&lt;/strong&gt;. One is from creating the variable. The second is when we pass the variable &lt;strong&gt;a&lt;/strong&gt; to the &lt;strong&gt;sys.getrefcount()&lt;/strong&gt; function. Adding the variable to a data structure ex. list/dictionary etc, will increase reference count.&lt;/p&gt;

&lt;h2 id=&quot;generational-garbage-collection&quot;&gt;Generational garbage collection&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By deleting the instance, it’s no longer accessible in our program, but Python didn’t destroy the instance from memory. The instance doesn’t have a reference count of zero because it has a reference to itself. We call this type of problem a &lt;strong&gt;circular reference&lt;/strong&gt; and you &lt;strong&gt;can’t solve it by reference counting&lt;/strong&gt;. The gc exists only to detect and free circular references.&lt;/p&gt;

&lt;p&gt;The garbage collector divides all objects into &lt;strong&gt;3 generations&lt;/strong&gt;. New objects are included in the first generation. If the new object survives the garbage collection process, then it is moved to the next generation. The higher the generation, the less often it is scanned for garbage. GC detects and breaks circular references by identifying unreachable objects through a process known as &lt;strong&gt;mark and sweep&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The mark and sweep algorithm works in two phases. In the &lt;strong&gt;mark phase&lt;/strong&gt;, it traverses the object graph starting from the root objects and marks all the reachable objects. In the &lt;strong&gt;sweep phase&lt;/strong&gt;, it deallocates the memory of the unmarked objects.&lt;/p&gt;

&lt;p&gt;Each generation has:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;special counter&lt;/strong&gt; - stores the number of allocations minus the number of deallocations&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;threshold for number of objects&lt;/strong&gt; - if the number of objects exceeds that threshold, the garbage collector will trigger a collection process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may change the behavior of the generational garbage collector in your Python program. This includes &lt;strong&gt;changing the thresholds&lt;/strong&gt; for triggering a garbage collection process. Additionally, you can &lt;strong&gt;manually trigger a garbage collection&lt;/strong&gt; process &lt;strong&gt;or disable the garbage collection&lt;/strong&gt; process altogether.&lt;/p&gt;

&lt;p&gt;Python 3.12 introduces a new concept called immortal objects that their reference count doesn’t change. Python interpreter can now skip reference counting for some objects that live until the Python process terminates ex for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Apr 2024 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/python-garbage-collection/</link>
        <guid isPermaLink="true">http://localhost:4000/python-garbage-collection/</guid>
      </item>
    
      <item>
        <title>Dublin London Relocation</title>
        <description>&lt;p&gt;Greetings, fellow developers! Buckle up and join me on an extraordinary adventure as I share my tale of relocating from the charming streets of Dublin to the bustling tech hub of London. Get ready for a wild ride filled with laughter, challenges, and some top-notch coding anecdotes!&lt;/p&gt;

&lt;p&gt;Section 1: The London Calling: Tech Scene and Job Market Unveiled
Hold on tight as we dive into the vibrant world of London’s tech scene. From its teeming tech giants to its quirky startups, discover why London is the ultimate destination for Java and Python enthusiasts like us. We’ll explore the wonders of the job market, salaries that make your eyes sparkle, and the epic opportunities awaiting our coding prowess.&lt;/p&gt;

&lt;p&gt;Section 2: Quest for the Perfect Job: From Job Boards to Networking Galore
Grab your sword (or rather, your keyboard) as we embark on a quest to find the perfect job in London. We’ll navigate through the treacherous realms of job boards, craft mighty resumes and cover letters, and wield the power of networking to unlock secret job opportunities. Expect some hilarious tales of interviews gone wrong and triumphs that will make you fist-pump the air!&lt;/p&gt;

&lt;p&gt;Section 3: The Relocation Odyssey: Rentals, and the Art of Tetris
Prepare for a whirlwind of logistics and challenges as we tackle the daunting task of relocating to London. We’ll unravel the mysteries of paperwork, unveil the secrets to finding your dream flat in the concrete jungle, and share our ingenious packing techniques (spoiler alert: it involves the art of Tetris). This section is filled with laughter, mishaps, and a few “oops, I forgot that” moments.&lt;/p&gt;

&lt;p&gt;Section 4: Conquering the Concrete Jungle: Embracing London’s Tech Community
Roar with triumph as we dive headfirst into London’s tech community. From joining meetups and developer networks to basking in the glory of tech-focused events, we’ll discover the wonders of the concrete jungle and build our own support system. Get ready for a rollercoaster of networking adventures, late-night coding sessions, and finding friends who laugh at our nerdy jokes.&lt;/p&gt;

&lt;p&gt;Section 5: Off the Keyboard, Into the City: London’s Charms and Delights
Code by day, explore by night! Unleash your inner adventurer as we venture beyond the code lines and discover the captivating charm of London’s culture and lifestyle. From historical landmarks that make you feel like a time-traveling developer to the mouthwatering delicacies that fuel our coding superpowers, we’ll uncover hidden gems and secret spots that only true Londoners know.&lt;/p&gt;

&lt;p&gt;Conclusion:
As our epic journey comes to an end, take a moment to reflect on the laughter, challenges, and personal growth we’ve experienced together. Relocating to London as a Java/Python developer is no small feat, but with the right mix of determination, humor, and coding genius, you too can conquer new horizons and embark on your own extraordinary adventure.&lt;/p&gt;

&lt;p&gt;So, fellow developers, grab your keyboards, pack your bags, and let’s make our mark on the tech kingdom of London! Adventure awaits, and who knows what incredible coding tales we’ll be sharing next.&lt;/p&gt;

&lt;p&gt;Remember: London’s calling, and we’re answering with code!&lt;/p&gt;

&lt;p&gt;PS. Text above was generated by using ChatGPT. Hope you like it as I do!
PS2. Relocation occurred on 3rd January 2023, but just now got a time to write about it&lt;/p&gt;

&lt;p&gt;Photo of Bloomberg office in London&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/BloombergLondon/bloomberg-london.jpg&quot; alt=&quot;BloombergLondon&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 May 2023 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/dublin-london-relocation/</link>
        <guid isPermaLink="true">http://localhost:4000/dublin-london-relocation/</guid>
      </item>
    
      <item>
        <title>Dublin Turkey Shoot Regatta</title>
        <description>&lt;p&gt;Few shots from Turkey Shoot Race which took place in Dublin Bay on 28/11/2021&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/TurkeyShootRegatta/dublin_turkey_shoot_race.jpg&quot; alt=&quot;TurkeyShootRegatta&quot; /&gt;
&lt;img src=&quot;/assets/TurkeyShootRegatta/dublin_turkey_shoot_race2.jpg&quot; alt=&quot;TurkeyShootRegatta_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More information can be found here &lt;a href=&quot;https://afloat.ie/sail/events/dbsc-turkey-shoot&quot;&gt;DUBLIN BAY SAILING CLUB (DBSC) TURKEY SHOOT RACING AND RESULTS&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/dublin-turkey-shoot-regatta/</link>
        <guid isPermaLink="true">http://localhost:4000/dublin-turkey-shoot-regatta/</guid>
      </item>
    
      <item>
        <title>Elasticsearch and Kibana in Docker</title>
        <description>&lt;p&gt;As I have started playing a little bit with ElasticSearch and Kibana locally, obviously via Docker. Feel free to find below how to start play with it as well.&lt;/p&gt;

&lt;p&gt;First of all, let’s create a network in Docker that will be used to communicate by these products&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker network create elastic&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we run Elasticsearch linked to an elastic network in single-node mode as we do not expect to cluster it with more nodes on localhost&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; elasticsearch &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; elastic &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 9200:9200 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 9300:9300 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;discovery.type=single-node&quot;&lt;/span&gt; elasticsearch:7.13.2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we run Kibana also linked to an elastic network. We are also forced to define a variable called ELASTICSEARCH_HOSTS which is going to be loaded into kibana.yml into a container&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; kibana &lt;span class=&quot;nt&quot;&gt;--network&lt;/span&gt; elastic &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5601:5601 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ELASTICSEARCH_HOSTS=http://elasticsearch:9200&quot;&lt;/span&gt; kibana:7.13.2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember that elasticsearch and kibana should have the same versions, it’s a compelling requirement so they might both work correctly!&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Jul 2021 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/elasticsearch-kibana-docker/</link>
        <guid isPermaLink="true">http://localhost:4000/elasticsearch-kibana-docker/</guid>
      </item>
    
      <item>
        <title>Julia Lang</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/Julia/julia.png&quot; alt=&quot;Julia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently I have started exploring new dynamic programming language called &lt;a href=&quot;https://julialang.org/&quot;&gt;Julia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why? As it’s getting more interest in finance world where better performance is needed in comparison to Python or MATLAB. For instance BlackRock uses it for time-series analytics and Aviva uses it for risk calculations. Even Federal Reserve Bank of New York used Julia to make models of the United States economy. Some details of it can be found here &lt;a href=&quot;https://www.youtube.com/watch?v=Vd2LJI3JLU0&quot;&gt;JuliaCon 2016 - Economic Modeling at the Federal Reserve Bank of New York - Erica Moszkowski&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Julia uses a just-in-time (JIT) compiler (as it’s not an interpreted language) called “just-ahead-of-time” (JAOT) which was implemented by using LLVM. Code is compiled to native machine code before running it.&lt;/p&gt;

&lt;p&gt;Julia has a lot of interesting features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lightweight “green” threading (coroutines)&lt;/li&gt;
  &lt;li&gt;Efficient support for Unicode (v. 13.0) with UTF-8 used for strings&lt;/li&gt;
  &lt;li&gt;Built-in package manager&lt;/li&gt;
  &lt;li&gt;Macros&lt;/li&gt;
  &lt;li&gt;Interfaces to work with other languages - Python by PyCall, R by RCall and Java/Scala by JavaCall&lt;/li&gt;
  &lt;li&gt;Designed for parallel and distributed computing&lt;/li&gt;
  &lt;li&gt;Multiple dispatch - all concrete types are subtypes of abstract types, directly or indirectly subtypes of the &lt;strong&gt;Any&lt;/strong&gt; type which is the top of the type hierarchy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Julia’s source code is directly executed as executable code as Julia is a compiled language. Multiple dispatch helps to define data types like arrays and numbers in appropriate places. Python is fast but unfortunately not fast as Julia. Python can be faster by using pre-optimized external libraries or even third-party JIT compilers.&lt;/p&gt;

&lt;p&gt;Few benchmarks between Julia and Python can be found here &lt;a href=&quot;https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/julia-python3.html&quot;&gt;Benchmarks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will try to explore Julia more and that would mean that more posts can be found around it on the blog in the future. Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Mar 2021 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/julia-lang/</link>
        <guid isPermaLink="true">http://localhost:4000/julia-lang/</guid>
      </item>
    
      <item>
        <title>Trading and Exchanges - Market Microstructure for Practitioners</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/TradingExchanges/trading_and_exchanges.jpg&quot; alt=&quot;Trading and Exchanges&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I finally went through an absorbing book &lt;strong&gt;Trading and Exchanges: Market Microstructure for Practitioners&lt;/strong&gt; written by &lt;strong&gt;Larry Harris&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Book itself was published in 2003, but it still holds essential knowledge about markets and their mechanics. I dedicate this book truly to people who think about investments or have a genuine interest in how markets work and what kind of participants we can find on them.&lt;/p&gt;

&lt;p&gt;From my perspective chapters that lifted up my knowledge where Part III - Speculators and Part IV - Liquidity Suppliers&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/1290158.Trading_and_Exchanges&quot;&gt;Trading and Exchanges: Market Microstructure for Practitioners on GoodReads.com&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/trading-and-exchanges/</link>
        <guid isPermaLink="true">http://localhost:4000/trading-and-exchanges/</guid>
      </item>
    
      <item>
        <title>Kdb workshop from Kx</title>
        <description>&lt;p&gt;In early December 2020, I had a pleasure to take part of Workshop organized by &lt;a href=&quot;https://kx.com/&quot;&gt;Kx&lt;/a&gt; about &lt;a href=&quot;https://en.wikipedia.org/wiki/Kdb%2B&quot;&gt;Kdb+&lt;/a&gt; which is a column-based relational time-series database.&lt;/p&gt;

&lt;p&gt;Workshop was divided into three sections&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;data exploration - grouping, aggregations, joins&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;q&lt;/em&gt;&lt;/strong&gt; language - deeper look on its features like atom &amp;amp; vector operations along with temporal arithmetic and adverbs&lt;/li&gt;
  &lt;li&gt;data loading - using external sources like CSV and JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting through the material was pretty enjoyable because of the trainer of course, but also that all exercises were implemented in Jupyter Notebook, so it was easy to navigate and evaluate your calculations against correct data&lt;/p&gt;

&lt;p&gt;Kdb+ itself made a good impression on me as a tool to process very large sets of data in a matter of few milliseconds. It seems that key to the success of it is that data is pushed to random-access memory (RAM) for processing.&lt;/p&gt;

&lt;p&gt;The core of kdb+ was built using &lt;strong&gt;&lt;em&gt;q&lt;/em&gt;&lt;/strong&gt; programming language which was discussed during the workshop.&lt;/p&gt;

&lt;p&gt;I think that kdb+ is a very good tool to explore it more if someone has a desire to work in the finance world, for instance in high-frequency trading (HFT) companies which use it for analyzing time-series data such as stock or commodity exchange data.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/kdb-workshop-from-kx/</link>
        <guid isPermaLink="true">http://localhost:4000/kdb-workshop-from-kx/</guid>
      </item>
    
      <item>
        <title>JodaTime - week number in month of business date</title>
        <description>&lt;p&gt;If you would like to figure out week number in the month of your business date by using JodaTime in Java, please check below code snippet&lt;/p&gt;

&lt;p&gt;Examples&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Week number in the month for business date of 2020-10-07 is 2&lt;/li&gt;
  &lt;li&gt;Week number in the month for business date of 2020-10-21 is 4&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstDayOfTheMonth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;businessDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dayOfMonth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMinimumValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weekOfMonth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Weeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weeksBetween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstDayOfTheMonth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;businessDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dayOfWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMaximumValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plusDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/joda-time-week-number-in-month-of-business-date/</link>
        <guid isPermaLink="true">http://localhost:4000/joda-time-week-number-in-month-of-business-date/</guid>
      </item>
    
      <item>
        <title>Investopedia - Dark Pool</title>
        <description>&lt;p&gt;A few days ago I was refreshing my knowledge around Dark Pools which are private exchanges for trading securities that are not accessible for the public. Instead of checking my private library, I just went to Investopedia article &lt;a href=&quot;https://www.investopedia.com/articles/markets/050614/introduction-dark-pools.asp&quot;&gt;An Introduction to Dark Pools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After getting to section about types of Dark Pools, one detail caught my eye. In section &lt;strong&gt;&lt;em&gt;Broker-Dealer-Owned Dark Pool&lt;/em&gt;&lt;/strong&gt; some examples of Dark Pools were listed as follows - Credit Suisse’s CrossFinder, Goldman Sachs’ Sigma X, Citibank’s Citi-Match &amp;amp; Citi-Cross and Morgan Stanley’s MS Pool. I have realized that some time ago Citi has decided to close one of their alternative trading system (ATS) called CitiCross and that knowledge was accurate which was confirmed by this article - &lt;a href=&quot;https://www.thetradenews.com/citigroup-shuts-us-dark-pool-citicross/&quot;&gt;Citigroup shuts down US dark pool CitiCross&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nevertheless, as all Investopedia’s readers would like to have access to the most accurate information, I have sent a request to correct this error.&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/investopedia-dark-pool/</link>
        <guid isPermaLink="true">http://localhost:4000/investopedia-dark-pool/</guid>
      </item>
    
  </channel>
</rss>
