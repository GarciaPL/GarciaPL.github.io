<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lukasz Ciesluk</title>
    <description>Java Developer</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Trading and Exchanges - Market Microstructure for Practitioners</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/TradingExchanges/trading_and_exchanges.jpg&quot; alt=&quot;Trading and Exchanges&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I finally went through an absorbing book &lt;strong&gt;Trading and Exchanges: Market Microstructure for Practitioners&lt;/strong&gt; written by &lt;strong&gt;Larry Harris&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Book itself was published in 2003, but it still holds essential knowledge about markets and their mechanics. I dedicate this book truly to people who think about investments or have a genuine interest in how markets work and what kind of participants we can find on them.&lt;/p&gt;

&lt;p&gt;From my perspective chapters that lifted up my knowledge where Part III - Speculators and Part IV - Liquidity Suppliers&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/1290158.Trading_and_Exchanges&quot;&gt;Trading and Exchanges: Market Microstructure for Practitioners on GoodReads.com&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/trading-and-exchanges/</link>
        <guid isPermaLink="true">http://localhost:4000/trading-and-exchanges/</guid>
      </item>
    
      <item>
        <title>Kdb workshop from Kx</title>
        <description>&lt;p&gt;In early December 2020, I had a pleasure to take part of Workshop organized by &lt;a href=&quot;https://kx.com/&quot;&gt;Kx&lt;/a&gt; about &lt;a href=&quot;https://en.wikipedia.org/wiki/Kdb%2B&quot;&gt;Kdb+&lt;/a&gt; which is a column-based relational time-series database.&lt;/p&gt;

&lt;p&gt;Workshop was divided into three sections&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;data exploration - grouping, aggregations, joins&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;q&lt;/em&gt;&lt;/strong&gt; language - deeper look on its features like atom &amp;amp; vector operations along with temporal arithmetic and adverbs&lt;/li&gt;
  &lt;li&gt;data loading - using external sources like CSV and JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting through the material was pretty enjoyable because of the trainer of course, but also that all exercises were implemented in Jupyter Notebook, so it was easy to navigate and evaluate your calculations against correct data&lt;/p&gt;

&lt;p&gt;Kdb+ itself made a good impression on me as a tool to process very large sets of data in a matter of few milliseconds. It seems that key to the success of it is that data is pushed to random-access memory (RAM) for processing.&lt;/p&gt;

&lt;p&gt;The core of kdb+ was built using &lt;strong&gt;&lt;em&gt;q&lt;/em&gt;&lt;/strong&gt; programming language which was discussed during the workshop.&lt;/p&gt;

&lt;p&gt;I think that kdb+ is a very good tool to explore it more if someone has a desire to work in the finance world, for instance in high-frequency trading (HFT) companies which use it for analyzing time-series data such as stock or commodity exchange data.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/kdb-workshop-from-kx/</link>
        <guid isPermaLink="true">http://localhost:4000/kdb-workshop-from-kx/</guid>
      </item>
    
      <item>
        <title>JodaTime - week number in month of business date</title>
        <description>&lt;p&gt;If you would like to figure out week number in the month of your business date by using JodaTime in Java, please check below code snippet&lt;/p&gt;

&lt;p&gt;Examples&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Week number in the month for business date of 2020-10-07 is 2&lt;/li&gt;
  &lt;li&gt;Week number in the month for business date of 2020-10-21 is 4&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;LocalDate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstDayOfTheMonth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;businessDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dayOfMonth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMinimumValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weekOfMonth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Weeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;weeksBetween&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstDayOfTheMonth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;businessDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dayOfWeek&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withMaximumValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plusDays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWeeks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/joda-time-week-number-in-month-of-business-date/</link>
        <guid isPermaLink="true">http://localhost:4000/joda-time-week-number-in-month-of-business-date/</guid>
      </item>
    
      <item>
        <title>Investopedia - Dark Pool</title>
        <description>&lt;p&gt;A few days ago I was refreshing my knowledge around Dark Pools which are private exchanges for trading securities that are not accessible for the public. Instead of checking my private library, I just went to Investopedia article &lt;a href=&quot;https://www.investopedia.com/articles/markets/050614/introduction-dark-pools.asp&quot;&gt;An Introduction to Dark Pools&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After getting to section about types of Dark Pools, one detail caught my eye. In section &lt;strong&gt;&lt;em&gt;Broker-Dealer-Owned Dark Pool&lt;/em&gt;&lt;/strong&gt; some examples of Dark Pools were listed as follows - Credit Suisse’s CrossFinder, Goldman Sachs’ Sigma X, Citibank’s Citi-Match &amp;amp; Citi-Cross and Morgan Stanley’s MS Pool. I have realized that some time ago Citi has decided to close one of their alternative trading system (ATS) called CitiCross and that knowledge was accurate which was confirmed by this article - &lt;a href=&quot;https://www.thetradenews.com/citigroup-shuts-us-dark-pool-citicross/&quot;&gt;Citigroup shuts down US dark pool CitiCross&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nevertheless, as all Investopedia’s readers would like to have access to the most accurate information, I have sent a request to correct this error.&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/investopedia-dark-pool/</link>
        <guid isPermaLink="true">http://localhost:4000/investopedia-dark-pool/</guid>
      </item>
    
      <item>
        <title>IntelliJ - Static Imports by Replace Structurally</title>
        <description>&lt;p&gt;In my project at work, I was forced to do one very painful refactoring, but hopefully, IntelliJ came to rescue! The task was divided into two steps. The first step was about extracting literal into a constant variable in about maybe 200 places. That step was easy by using Replace in Path (Ctrl+Shift+R). The second and final step was about making static imports to that new constant in every class. Making such a change by hand was too overwhelming for me, but expectantly, there is a tool in IntelliJ called &lt;strong&gt;Replace Structurally&lt;/strong&gt;. That tool allows you to replace every import of your variable to be static import instead of normal field import by selecting the option &lt;strong&gt;Use static imports&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/IntelliJ/intellij_structural_replace.png&quot; alt=&quot;IntelliJ Structural Replace&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
        <link>http://localhost:4000/intellij-static-imports-replace-structurally/</link>
        <guid isPermaLink="true">http://localhost:4000/intellij-static-imports-replace-structurally/</guid>
      </item>
    
      <item>
        <title>Digital Euro</title>
        <description>&lt;p&gt;At the beginning of October, a very interesting report was released by European Central Bank with the title &lt;a href=&quot;https://www.ecb.europa.eu/pub/pdf/other/Report_on_a_digital_euro~4d7268b458.en.pdf&quot;&gt;Report on a digital euro&lt;/a&gt;. If this link is expired, you can check alternatively this one &lt;a href=&quot;/assets/DigitalEuro/Digital_Euro.pdf&quot;&gt;Report on a digital euro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This document describes mainly what kind of requirements digital euro must fulfil in terms of accessibility, robustness, safety, efficiency and even privacy to some degree along with relevant legislation before moving to any specific design of it. It also brings more light on how a digital euro would create synergies with private payment solutions and contribute to a more innovative, competitive and resilient European payment system.&lt;/p&gt;

&lt;p&gt;Minimum viable product (MVP) is planned to be rolled out by High-Level Task Force on CBDC after approval of Governing Council of the ECB up to mid-2021 to test functional designs and to explore the technical feasibility of different options, as well as their ability to satisfy the needs of prospective users.&lt;/p&gt;

&lt;p&gt;Core principles&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Convertibility at par: Not a parallel currency&lt;/li&gt;
  &lt;li&gt;Liability of the Eurosystem: A digital euro is central bank money and its issuance is controlled by the Eurosystem&lt;/li&gt;
  &lt;li&gt;European solution: Widely accessible on equal terms in all euro area countries through supervised service providers&lt;/li&gt;
  &lt;li&gt;Market neutrality: Not to crowd out private solutions&lt;/li&gt;
  &lt;li&gt;Trusted by end-users: Trusted solution from the start and overtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A digital euro should not aim to replace cash, but should be only a complementary form of payment. It would be up to European citizens to decide whether to use digital euro instead of cash payments.&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Oct 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/digital-euro/</link>
        <guid isPermaLink="true">http://localhost:4000/digital-euro/</guid>
      </item>
    
      <item>
        <title>Fixer currency in Libreoffice</title>
        <description>&lt;p&gt;As I am running some internal spreadsheet to track our cash flow, I had to find out a solid foreign exchange rates and currency conversion API. I have found that 
&lt;a href=&quot;https://fixer.io/&quot;&gt;Fixer.io&lt;/a&gt; provides access without any cost for up to 1000 APIs calls per month which was enough for my needs.&lt;/p&gt;

&lt;p&gt;Fetching foreign currency rate for pair &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EUR/PLN&lt;/code&gt; using this API looks like this&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;http://data.fixer.io/api/latest?access_key=XXX&amp;amp;base=&amp;amp;symbols=PLN&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and we will get an output as&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;{
	&quot;success&quot;: true,
	&quot;timestamp&quot;: 1595759045,
	&quot;base&quot;: &quot;EUR&quot;,
	&quot;date&quot;: &quot;2020-07-26&quot;,
	&quot;rates&quot;: {
		&quot;PLN&quot;: 4.405059
	}
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Injecting this currency rate directly into Libreoffice Calc spreadsheet will look like as below as we will use &lt;a href=&quot;https://help.libreoffice.org/Calc/WEBSERVICE&quot;&gt;WEBSERVICE&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;=WEBSERVICE(&quot;http://data.fixer.io/api/latest?access_key=XXX&amp;amp;base=&amp;amp;symbols=PLN&quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but then if you would like to extract for your computational need just the rate you might need to use regex&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;=REGEX(WEBSERVICE(&quot;http://data.fixer.io/api/latest?access_key=XXX&amp;amp;base=&amp;amp;symbols=PLN&quot;),&quot;\d{1,2}[\,\.]{1}\d{1,5}&quot;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\d{1,5}&lt;/code&gt; you specify amount of decimal places you are interested in of number &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4.405059&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jul 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/libreoffice-fixer-currency/</link>
        <guid isPermaLink="true">http://localhost:4000/libreoffice-fixer-currency/</guid>
      </item>
    
      <item>
        <title>IntelliJ - Live Templates</title>
        <description>&lt;p&gt;Recently I had a desire to explore a little bit of how static websites are generated using modern stack like React. I choose at the time open-source framework called 
&lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;Gatsby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gatsby has lots of advantages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automatic routing based on your directory structure, so no extra code for configuring the router is needed&lt;/li&gt;
  &lt;li&gt;Easily extensible by plugins&lt;/li&gt;
  &lt;li&gt;Optimized for speed as only critical parts of your website are loaded&lt;/li&gt;
  &lt;li&gt;Easy data integration with sources like CMSs, APIs, databases, file system (CSV, JSON, Markdown)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using that technology I had created a simple project called &lt;strong&gt;IntelliJ Live Templates&lt;/strong&gt; which provides listings of live templates ready to be used by developers in &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt;. Explanation of how live templates are used is placed on a project website under section About.&lt;/p&gt;

&lt;p&gt;Data to fill out the website is taken from the repository placed on Github in the form of Markdown files&lt;/p&gt;

&lt;p&gt;Project link =&amp;gt; &lt;a href=&quot;https://intellijlivetemplates.netlify.app/&quot;&gt;IntelliJ - Live Templates&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/intellij-live-templates/</link>
        <guid isPermaLink="true">http://localhost:4000/intellij-live-templates/</guid>
      </item>
    
      <item>
        <title>Dun Laoghaire in Dublin, Ireland</title>
        <description>&lt;p&gt;Just a few photos taken while being in Dun Laoghaire which is located in Dublin, Ireland. The exact location is &lt;a href=&quot;https://www.google.ie/maps/place/E+Pier,+D%C3%BAn+Laoghaire,+Dublin/@53.3122877,-6.139,12.17z/data=!4m5!3m4!1s0x4867063d854e7319:0xc44ffbfbae05dc1!8m2!3d53.2978031!4d-6.1245288&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/DunLaoghaire/DunLaoghaire_1.JPG&quot; alt=&quot;DunLaoghaire_1&quot; /&gt;
&lt;img src=&quot;/assets/DunLaoghaire/DunLaoghaire_2.JPG&quot; alt=&quot;DunLaoghaire_2&quot; /&gt;
&lt;img src=&quot;/assets/DunLaoghaire/DunLaoghaire_3.JPG&quot; alt=&quot;DunLaoghaire_3&quot; /&gt;
&lt;img src=&quot;/assets/DunLaoghaire/DunLaoghaire_4.JPG&quot; alt=&quot;DunLaoghaire_4&quot; /&gt;
&lt;img src=&quot;/assets/DunLaoghaire/DunLaoghaire_5.JPG&quot; alt=&quot;DunLaoghaire_5&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Jun 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/dun-laoghaire-dublin/</link>
        <guid isPermaLink="true">http://localhost:4000/dun-laoghaire-dublin/</guid>
      </item>
    
      <item>
        <title>Java Integer Cache</title>
        <description>&lt;p&gt;Do you know that cache exists even for Integers in Java ? I forgot even mention about Byte, Short, Long and Character as well!&lt;/p&gt;

&lt;p&gt;I get it, you might have been amazed by why these types in Java have a cache at all. I ensure you that even Senior Developers are astounded by the existence of this feature which lives with us since Java 5&lt;/p&gt;

&lt;p&gt;Why do even have it in JDK ? Answer it’s pretty the same when we think or/and use cache in various scenarios - performance and better usage of memory&lt;/p&gt;

&lt;p&gt;Let’s go through some examples to highlight for which cases this internal cache is utilized&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;450&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The same&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Different&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Both variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;second&lt;/code&gt; hold the same value, but they have different references. Within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement, we are comparing their memory address, not values itself as for this we should have been using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt;. That’s why for the above example our result is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Different&lt;/code&gt; which is correct&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The same&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Different&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In that case, the correct answer is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;The same&lt;/code&gt;. Before you are going to throw out all your knowledge about how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;equals()&lt;/code&gt; work in Java, please hold on for now&lt;/p&gt;

&lt;p&gt;As you have noticed, some kind of barrier exists when values of Integer are cached or not. That range is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-128&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127&lt;/code&gt; (inclusive). It’s applied only on autoboxing when Integer object is going to be build using the constructor ex. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer.valueOf(12)&lt;/code&gt;. Hopefully, we can modify the high value of that range via VM argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-XX:AutoBoxCacheMax=&amp;lt;size&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Below you can find source code of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer.valueOf()&lt;/code&gt; method is taken from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java-8-openjdk-amd64&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    &lt;span class=&quot;cm&quot;&gt;/**
     * Returns an {@code Integer} instance representing the specified
     * {@code int} value.  If a new {@code Integer} instance is not
     * required, this method should generally be used in preference to
     * the constructor {@link #Integer(int)}, as this method is likely
     * to yield significantly better space and time performance by
     * caching frequently requested values.
     *
     * This method will always cache values in the range -128 to 127,
     * inclusive, and may cache other values outside of this range.
     *
     * @param  i an {@code int} value.
     * @return an {@code Integer} instance representing {@code i}.
     * @since  1.5
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IntegerCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The cache is initialized on the first usage of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt; class. Within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerCache&lt;/code&gt; we have defined a variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static final Integer cache[]&lt;/code&gt; which is populated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integers&lt;/code&gt; depends on properties like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;low (-128)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;high (127 or set by VM argument)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Other Java types like Byte, Short, Long (-127 to 127 (inclusive)) and Character (0 to 127 (inclusive)) received fixed range for cache and cannot be amended using VM argument&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Jun 2020 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/java-integer-cache/</link>
        <guid isPermaLink="true">http://localhost:4000/java-integer-cache/</guid>
      </item>
    
  </channel>
</rss>
